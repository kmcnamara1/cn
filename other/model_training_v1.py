import os
import argparse
import json
import sagemaker
import numpy as np
from sagemaker.tensorflow import TensorFlow
from sagemaker.analytics import TrainingJobAnalytics
from tensorflow.python.keras.preprocessing.image import load_img
   
ON_SAGEMAKER_NOTEBOOK = True
sagemaker_session = sagemaker.Session()
if ON_SAGEMAKER_NOTEBOOK:
    role = sagemaker.get_execution_role()
else:
    role = "Kate_SageMaker"
    
bucket = "tickercardiology-echocv-sagemaker"
key = "model-data"
train_input_path = "s3://{}/{}/train/".format(bucket, key)
validation_input_path = "s3://{}/{}/test/".format(bucket, key)
    
hyperparameters={
    "learning_rate": 1e-5, #1e-4
    "decay": 1e-8, #1e-6
    "mini_batch_size": 64
#     "sagemaker_enable_cloudwatch_metrics": "true"
}
    
train_instance_type = 'ml.m5.2xlarge'
deploy_instance_type = 'ml.m5.2xlarge'
model_dir = '/opt/ml/model'
    
estimator = TensorFlow(
    entry_point=os.path.join(os.path.dirname(__file__), "keras_model_fn.py"),             # Your entry script
    model_dir=model_dir,
    role=role,
    framework_version="1.12.0",               # TensorFlow's version
    hyperparameters=hyperparameters,
#     training_steps=100, #1000
#     evaluation_steps=100, #100
    train_instance_count=1,                   # "The number of GPUs instances to use"
    train_instance_type=train_instance_type,
)
    
    
print("Training ...")

estimator.fit({'training': train_input_path, 'eval': validation_input_path}, wait=False)
vgg = estimator.latest_training_job.name

# estimator.fit({'training': train_input_path, 'eval': validation_input_path}) # start the training job

# Deploys the model that was generated by fit() to a SageMaker endpoint
# predictor = estimator.deploy(initial_instance_count=1, instance_type=deploy_instance_type)

# Serializes data and makes a prediction request to the SageMaker endpoint
# response = predictor.predict(data)

# Tears down the SageMaker endpoint and endpoint configuration
# predictor.delete_endpoint()

# Deletes the SageMaker model
# predictor.delete_model()